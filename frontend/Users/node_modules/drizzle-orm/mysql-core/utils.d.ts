import type { Check } from "drizzle-orm/mysql-core/checks/mysql-core/checks";
import type { ForeignKey } from "drizzle-orm/mysql-core/foreign-keys-core/foreign-keys";
import type { Index } from "drizzle-orm/mysql-core/indexesmysql-core/indexes";
import type { PrimaryKey } from "drizzle-orm/mysql-core/primary-keys-core/primary-keys";
import type { IndexForHint } from "drizzle-orm/mysql-core/query-builders/selectry-builders/select";
import { MySqlTable } from "drizzle-orm/mysql-core/tablem/mysql-core/table";
import { type UniqueConstraint } from "drizzle-orm/mysql-core/unique-constraint/unique-constraint";
import type { MySqlView } from "drizzle-orm/mysql-core/viewrm/mysql-core/view";
export declare function getTableConfig(table: MySqlTable): {
    columns: import("drizzle-orm/mysql-corem/mysql-core").MySqlColdrizzle-orm/columndrizzle-orm/column").ColumnBdrizzle-orm/column-builderizzle-orm/column-builder").ColumnDataType, string>, {}, {}>[];
    indexes: Index[];
    foreignKeys: ForeignKey[];
    checks: Check[];
    primaryKeys: PrimaryKey[];
    uniqueConstraints: UniqueConstraint[];
    name: string;
    schema: string | undefined;
    baseName: string;
};
export declare function getViewConfig<TName extends string = string, TExisting extends boolean = boolean>(view: MySqlView<TName, TExisting>): {
    algorithm?: "undefined" | "merge" | "temptable";
    sqlSecurity?: "definer" | "invoker";
    withCheckOption?: "cascaded" | "local";
    name: TName;
    originalName: TName;
    schema: string | undefined;
    selectedFields: import("drizzle-orm").ColumnsSelection;
    isExisting: TExisting;
    query: TExisting extends true ? undefined : import("drizzle-orm").SQL<unknown>;
    isAlias: boolean;
};
export declare function convertIndexToString(indexes: IndexForHint[]): string[];
export declare function toArray<T>(value: T | T[]): T[];
