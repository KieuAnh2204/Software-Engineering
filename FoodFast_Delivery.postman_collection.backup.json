{
	"info": {
		"_postman_id": "foodfast-delivery-api",
		"name": "üçî FoodFast Delivery API",
		"description": "Complete API for FoodFast Delivery - Food Delivery App\n\n**Setup:**\n1. Import collection\n2. Create environment: `base_url` = `http://localhost:3001`\n3. Run requests in order\n\n**Auto-saves token after login/register**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3001",
			"type": "default"
		},
		{
			"key": "token",
			"value": "",
			"type": "default"
		},
		{
			"key": "customer_token",
			"value": "",
			"type": "default"
		},
		{
			"key": "restaurant_token",
			"value": "",
			"type": "default"
		},
		{
			"key": "customer_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "restaurant_id",
			"value": "",
			"type": "default"
		}
	],
	"item": [
		{
			"name": "User Service",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"    pm.expect(jsonData.service).to.eql(\"user-service\");",
									"});",
									"",
									"console.log(\"‚úÖ User Service is healthy and running!\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						},
						"description": "Check if User Service is running and healthy"
					},
					"response": []
				},
				{
					"name": "Register Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"customer_token\", jsonData.data.token);",
									"    pm.collectionVariables.set(\"customer_id\", jsonData.data.user._id);",
									"    pm.collectionVariables.set(\"token\", jsonData.data.token);",
									"    console.log(\"‚úÖ Customer 1 created successfully!\");",
									"    console.log(\"üìù Customer ID: \" + jsonData.data.user._id);",
									"    console.log(\"üîë Token saved to customer_token\");",
									"} else if (pm.response.code === 400) {",
									"    console.log(\"‚ö†Ô∏è Customer already exists - this is OK for testing\");",
									"}",
									"",
									"pm.test(\"Customer created or already exists\", function () {",
									"    pm.expect([201, 400]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"customer_test1\",\n  \"email\": \"customer1@foodfast.com\",\n  \"password\": \"customer123\",\n  \"fullName\": \"Nguy·ªÖn VƒÉn A\",\n  \"phone\": \"+84901234567\",\n  \"role\": \"customer\",\n  \"customerProfile\": {\n    \"address\": {\n      \"street\": \"123 L√™ L·ª£i\",\n      \"ward\": \"Ph∆∞·ªùng B·∫øn Ngh√©\",\n      \"district\": \"Qu·∫≠n 1\",\n      \"city\": \"H·ªì Ch√≠ Minh\",\n      \"coordinates\": {\n        \"lat\": 10.7756,\n        \"lng\": 106.7019\n      }\n    },\n    \"defaultAddress\": \"123 L√™ L·ª£i, Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, TP.HCM\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register"]
						},
						"description": "Create test customer 1"
					},
					"response": []
				},
				{
					"name": "Create Customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    console.log(\"‚úÖ Customer 2 created successfully!\");",
									"} else if (pm.response.code === 400) {",
									"    console.log(\"‚ö†Ô∏è Customer 2 already exists\");",
									"}",
									"",
									"pm.test(\"Customer created or already exists\", function () {",
									"    pm.expect([201, 400]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"customer_test2\",\n  \"email\": \"customer2@foodfast.com\",\n  \"password\": \"customer123\",\n  \"fullName\": \"Tr·∫ßn Th·ªã B\",\n  \"phone\": \"+84903456789\",\n  \"role\": \"customer\",\n  \"customerProfile\": {\n    \"address\": {\n      \"street\": \"88 ƒê·ªìng Kh·ªüi\",\n      \"ward\": \"Ph∆∞·ªùng B·∫øn Ngh√©\",\n      \"district\": \"Qu·∫≠n 1\",\n      \"city\": \"H·ªì Ch√≠ Minh\",\n      \"coordinates\": {\n        \"lat\": 10.7734,\n        \"lng\": 106.7010\n      }\n    },\n    \"defaultAddress\": \"88 ƒê·ªìng Kh·ªüi, Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, TP.HCM\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register"]
						},
						"description": "Create test customer 2"
					},
					"response": []
				},
				{
					"name": "Create Restaurant - Ph·ªü 24",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"restaurant_token\", jsonData.data.token);",
									"    pm.collectionVariables.set(\"restaurant_id\", jsonData.data.user._id);",
									"    console.log(\"‚úÖ Ph·ªü 24 restaurant created!\");",
									"    console.log(\"üìù Restaurant ID: \" + jsonData.data.user._id);",
									"    console.log(\"üîë Token saved to restaurant_token\");",
									"} else if (pm.response.code === 400) {",
									"    console.log(\"‚ö†Ô∏è Ph·ªü 24 already exists\");",
									"}",
									"",
									"pm.test(\"Restaurant created or already exists\", function () {",
									"    pm.expect([201, 400]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"restaurant_pho24\",\n  \"email\": \"pho24@restaurant.com\",\n  \"password\": \"restaurant123\",\n  \"fullName\": \"Ph·ªü 24 Qu·∫£n L√Ω\",\n  \"phone\": \"+84902345678\",\n  \"role\": \"restaurant\",\n  \"restaurantProfile\": {\n    \"restaurantName\": \"Ph·ªü 24\",\n    \"description\": \"Chu·ªói nh√† h√†ng ph·ªü n·ªïi ti·∫øng v·ªõi h∆°n 50 chi nh√°nh tr√™n to√†n qu·ªëc. Ph·ªü ƒë∆∞·ª£c n·∫•u t·ª´ x∆∞∆°ng h·∫ßm 24 ti·∫øng.\",\n    \"cuisineType\": [\"Vietnamese\"],\n    \"address\": {\n      \"street\": \"456 Nguy·ªÖn Hu·ªá\",\n      \"ward\": \"Ph∆∞·ªùng B·∫øn Ngh√©\",\n      \"district\": \"Qu·∫≠n 1\",\n      \"city\": \"H·ªì Ch√≠ Minh\",\n      \"coordinates\": {\n        \"lat\": 10.7731,\n        \"lng\": 106.7007\n      }\n    },\n    \"openingHours\": {\n      \"monday\": { \"open\": \"06:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"tuesday\": { \"open\": \"06:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"wednesday\": { \"open\": \"06:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"thursday\": { \"open\": \"06:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"friday\": { \"open\": \"06:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"saturday\": { \"open\": \"06:00\", \"close\": \"23:00\", \"isClosed\": false },\n      \"sunday\": { \"open\": \"06:00\", \"close\": \"23:00\", \"isClosed\": false }\n    },\n    \"priceRange\": \"$$\",\n    \"deliveryFee\": 15000,\n    \"minOrderAmount\": 50000,\n    \"isAcceptingOrders\": true\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register"]
						},
						"description": "Create Ph·ªü 24 restaurant"
					},
					"response": []
				},
				{
					"name": "Create Restaurant - Burger King",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    console.log(\"‚úÖ Burger King created!\");",
									"} else if (pm.response.code === 400) {",
									"    console.log(\"‚ö†Ô∏è Burger King already exists\");",
									"}",
									"",
									"pm.test(\"Restaurant created or already exists\", function () {",
									"    pm.expect([201, 400]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"restaurant_burgerking\",\n  \"email\": \"burgerking@restaurant.com\",\n  \"password\": \"restaurant123\",\n  \"fullName\": \"Burger King Manager\",\n  \"phone\": \"+84904567890\",\n  \"role\": \"restaurant\",\n  \"restaurantProfile\": {\n    \"restaurantName\": \"Burger King\",\n    \"description\": \"Fast food n·ªïi ti·∫øng th·∫ø gi·ªõi v·ªõi burger, g√† r√°n v√† khoai t√¢y chi√™n ngon tuy·ªát\",\n    \"cuisineType\": [\"FastFood\", \"Western\"],\n    \"address\": {\n      \"street\": \"200 Nguy·ªÖn Tr√£i\",\n      \"ward\": \"Ph∆∞·ªùng Nguy·ªÖn C∆∞ Trinh\",\n      \"district\": \"Qu·∫≠n 1\",\n      \"city\": \"H·ªì Ch√≠ Minh\",\n      \"coordinates\": {\n        \"lat\": 10.7654,\n        \"lng\": 106.6881\n      }\n    },\n    \"openingHours\": {\n      \"monday\": { \"open\": \"08:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"tuesday\": { \"open\": \"08:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"wednesday\": { \"open\": \"08:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"thursday\": { \"open\": \"08:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"friday\": { \"open\": \"08:00\", \"close\": \"23:00\", \"isClosed\": false },\n      \"saturday\": { \"open\": \"08:00\", \"close\": \"23:00\", \"isClosed\": false },\n      \"sunday\": { \"open\": \"08:00\", \"close\": \"23:00\", \"isClosed\": false }\n    },\n    \"priceRange\": \"$$\",\n    \"deliveryFee\": 10000,\n    \"minOrderAmount\": 60000,\n    \"isAcceptingOrders\": true\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register"]
						},
						"description": "Create Burger King restaurant"
					},
					"response": []
				},
				{
					"name": "Create Restaurant - Highlands Coffee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    console.log(\"‚úÖ Highlands Coffee created!\");",
									"} else if (pm.response.code === 400) {",
									"    console.log(\"‚ö†Ô∏è Highlands Coffee already exists\");",
									"}",
									"",
									"pm.test(\"Restaurant created or already exists\", function () {",
									"    pm.expect([201, 400]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"restaurant_highlands\",\n  \"email\": \"highlands@restaurant.com\",\n  \"password\": \"restaurant123\",\n  \"fullName\": \"Highlands Coffee Manager\",\n  \"phone\": \"+84905678901\",\n  \"role\": \"restaurant\",\n  \"restaurantProfile\": {\n    \"restaurantName\": \"Highlands Coffee\",\n    \"description\": \"Chu·ªói c√† ph√™ Vi·ªát Nam v·ªõi kh√¥ng gian hi·ªán ƒë·∫°i, c√† ph√™ ngon v√† b√°nh ng·ªçt ƒëa d·∫°ng\",\n    \"cuisineType\": [\"Drinks\", \"Dessert\"],\n    \"address\": {\n      \"street\": \"100 L√Ω T·ª± Tr·ªçng\",\n      \"ward\": \"Ph∆∞·ªùng B·∫øn Th√†nh\",\n      \"district\": \"Qu·∫≠n 1\",\n      \"city\": \"H·ªì Ch√≠ Minh\",\n      \"coordinates\": {\n        \"lat\": 10.7721,\n        \"lng\": 106.6984\n      }\n    },\n    \"openingHours\": {\n      \"monday\": { \"open\": \"07:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"tuesday\": { \"open\": \"07:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"wednesday\": { \"open\": \"07:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"thursday\": { \"open\": \"07:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"friday\": { \"open\": \"07:00\", \"close\": \"23:00\", \"isClosed\": false },\n      \"saturday\": { \"open\": \"07:00\", \"close\": \"23:00\", \"isClosed\": false },\n      \"sunday\": { \"open\": \"07:00\", \"close\": \"23:00\", \"isClosed\": false }\n    },\n    \"priceRange\": \"$$\",\n    \"deliveryFee\": 12000,\n    \"minOrderAmount\": 40000,\n    \"isAcceptingOrders\": true\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "register"]
						},
						"description": "Create Highlands Coffee restaurant"
					},
					"response": []
				}
			],
			"description": "Run this folder first to create test customers and restaurants.\n\n**Creates:**\n- 2 Customers (customer_test1, customer_test2)\n- 3 Restaurants (Ph·ªü 24, Burger King, Highlands Coffee)\n\n**Auto-saves:**\n- customer_token\n- restaurant_token\n- customer_id\n- restaurant_id"
		},
		{
			"name": "2. Customer Flow",
			"item": [
				{
					"name": "Customer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.token).to.exist;",
									"    pm.expect(jsonData.data.user.role).to.eql(\"customer\");",
									"    ",
									"    // Save token",
									"    pm.collectionVariables.set(\"customer_token\", jsonData.data.token);",
									"    pm.collectionVariables.set(\"token\", jsonData.data.token);",
									"    pm.collectionVariables.set(\"customer_id\", jsonData.data.user._id);",
									"    ",
									"    console.log(\"‚úÖ Customer logged in successfully!\");",
									"    console.log(\"üìù Username: \" + jsonData.data.user.username);",
									"    console.log(\"üîë Token saved\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"customer_test1\",\n  \"password\": \"customer123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						},
						"description": "Login as customer"
					},
					"response": []
				},
				{
					"name": "Get Customer Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile retrieved successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.role).to.eql(\"customer\");",
									"    pm.expect(jsonData.data.customerProfile).to.exist;",
									"    ",
									"    console.log(\"‚úÖ Customer profile retrieved!\");",
									"    console.log(\"üìù Name: \" + jsonData.data.fullName);",
									"    console.log(\"üìç Address: \" + jsonData.data.customerProfile.defaultAddress);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "profile"]
						},
						"description": "Get customer profile using token"
					},
					"response": []
				},
				{
					"name": "Update Customer Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    console.log(\"‚úÖ Customer profile updated!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{customer_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Nguy·ªÖn VƒÉn A (Updated)\",\n  \"phone\": \"+84909999999\",\n  \"customerProfile\": {\n    \"address\": {\n      \"street\": \"789 Hai B√† Tr∆∞ng\",\n      \"ward\": \"Ph∆∞·ªùng B·∫øn Ngh√©\",\n      \"district\": \"Qu·∫≠n 1\",\n      \"city\": \"H·ªì Ch√≠ Minh\"\n    },\n    \"defaultAddress\": \"789 Hai B√† Tr∆∞ng, Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, TP.HCM\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "profile"]
						},
						"description": "Update customer profile"
					},
					"response": []
				},
				{
					"name": "Browse All Restaurants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Restaurants list retrieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    ",
									"    console.log(\"‚úÖ Found \" + jsonData.pagination.totalRestaurants + \" restaurants\");",
									"    ",
									"    jsonData.data.forEach(function(restaurant) {",
									"        console.log(\"üçΩÔ∏è \" + restaurant.restaurantProfile.restaurantName);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/restaurants",
							"host": ["{{base_url}}"],
							"path": ["api", "users", "restaurants"]
						},
						"description": "Customer browses all available restaurants"
					},
					"response": []
				},
				{
					"name": "Search Vietnamese Restaurants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search results returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    console.log(\"‚úÖ Found \" + jsonData.count + \" Vietnamese restaurants\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/restaurants/search?cuisine=Vietnamese",
							"host": ["{{base_url}}"],
							"path": ["api", "users", "restaurants", "search"],
							"query": [
								{
									"key": "cuisine",
									"value": "Vietnamese"
								}
							]
						},
						"description": "Search for Vietnamese cuisine restaurants"
					},
					"response": []
				},
				{
					"name": "Search by City",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"City search results\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    console.log(\"‚úÖ Found \" + jsonData.count + \" restaurants in H·ªì Ch√≠ Minh\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/restaurants/search?city=H·ªì Ch√≠ Minh",
							"host": ["{{base_url}}"],
							"path": ["api", "users", "restaurants", "search"],
							"query": [
								{
									"key": "city",
									"value": "H·ªì Ch√≠ Minh"
								}
							]
						},
						"description": "Search restaurants by city"
					},
					"response": []
				}
			],
			"description": "Customer user flow:\n1. Login\n2. View profile\n3. Update profile\n4. Browse restaurants\n5. Search restaurants"
		},
		{
			"name": "3. Restaurant Flow",
			"item": [
				{
					"name": "Restaurant Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Restaurant login successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.user.role).to.eql(\"restaurant\");",
									"    ",
									"    pm.collectionVariables.set(\"restaurant_token\", jsonData.data.token);",
									"    pm.collectionVariables.set(\"token\", jsonData.data.token);",
									"    pm.collectionVariables.set(\"restaurant_id\", jsonData.data.user._id);",
									"    ",
									"    console.log(\"‚úÖ Restaurant logged in!\");",
									"    console.log(\"üçΩÔ∏è Restaurant: \" + jsonData.data.user.restaurantProfile.restaurantName);",
									"    console.log(\"üîë Token saved to restaurant_token\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"pho24@restaurant.com\",\n  \"password\": \"restaurant123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						},
						"description": "Login as restaurant owner"
					},
					"response": []
				},
				{
					"name": "Get Restaurant Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Restaurant profile retrieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.role).to.eql(\"restaurant\");",
									"    pm.expect(jsonData.data.restaurantProfile).to.exist;",
									"    ",
									"    console.log(\"‚úÖ Restaurant profile retrieved!\");",
									"    console.log(\"üçΩÔ∏è Name: \" + jsonData.data.restaurantProfile.restaurantName);",
									"    console.log(\"üìç Address: \" + jsonData.data.restaurantProfile.address.street);",
									"    console.log(\"üí∞ Delivery Fee: \" + jsonData.data.restaurantProfile.deliveryFee + \" VND\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{restaurant_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "profile"]
						},
						"description": "Get restaurant owner profile"
					},
					"response": []
				},
				{
					"name": "Update Restaurant Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Restaurant info updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    console.log(\"‚úÖ Restaurant info updated successfully!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{restaurant_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"restaurantProfile\": {\n    \"description\": \"Ph·ªü 24 - H∆∞∆°ng v·ªã ph·ªü truy·ªÅn th·ªëng Vi·ªát Nam. X∆∞∆°ng h·∫ßm 24 ti·∫øng, n∆∞·ªõc d√πng ng·ªçt thanh.\",\n    \"priceRange\": \"$$$\",\n    \"deliveryFee\": 20000,\n    \"minOrderAmount\": 80000,\n    \"isAcceptingOrders\": true,\n    \"openingHours\": {\n      \"monday\": { \"open\": \"07:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"tuesday\": { \"open\": \"07:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"wednesday\": { \"open\": \"07:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"thursday\": { \"open\": \"07:00\", \"close\": \"22:00\", \"isClosed\": false },\n      \"friday\": { \"open\": \"07:00\", \"close\": \"23:00\", \"isClosed\": false },\n      \"saturday\": { \"open\": \"07:00\", \"close\": \"23:00\", \"isClosed\": false },\n      \"sunday\": { \"open\": \"07:00\", \"close\": \"23:00\", \"isClosed\": false }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "profile"]
						},
						"description": "Update restaurant information"
					},
					"response": []
				},
				{
					"name": "Toggle Accepting Orders - Close",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    console.log(\"‚úÖ Restaurant status updated - Now CLOSED for orders\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{restaurant_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isAcceptingOrders\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/restaurants/{{restaurant_id}}/status",
							"host": ["{{base_url}}"],
							"path": ["api", "users", "restaurants", "{{restaurant_id}}", "status"]
						},
						"description": "Close restaurant for orders"
					},
					"response": []
				},
				{
					"name": "Toggle Accepting Orders - Open",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    console.log(\"‚úÖ Restaurant status updated - Now OPEN for orders\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{restaurant_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isAcceptingOrders\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/restaurants/{{restaurant_id}}/status",
							"host": ["{{base_url}}"],
							"path": ["api", "users", "restaurants", "{{restaurant_id}}", "status"]
						},
						"description": "Open restaurant for orders"
					},
					"response": []
				}
			],
			"description": "Restaurant owner flow:\n1. Login\n2. View profile\n3. Update restaurant info\n4. Toggle accepting orders status"
		},
		{
			"name": "4. Public APIs",
			"item": [
				{
					"name": "Get All Restaurants (No Auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Restaurants retrieved without auth\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    ",
									"    console.log(\"‚úÖ Public access working!\");",
									"    console.log(\"üìä Total restaurants: \" + jsonData.pagination.totalRestaurants);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/restaurants?page=1&limit=10",
							"host": ["{{base_url}}"],
							"path": ["api", "users", "restaurants"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Public endpoint - no authentication required"
					},
					"response": []
				},
				{
					"name": "Filter by Price Range",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/restaurants?priceRange=$$",
							"host": ["{{base_url}}"],
							"path": ["api", "users", "restaurants"],
							"query": [
								{
									"key": "priceRange",
									"value": "$$"
								}
							]
						},
						"description": "Filter restaurants by price range"
					},
					"response": []
				},
				{
					"name": "Filter by Cuisine Type",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/restaurants?cuisineType=Vietnamese",
							"host": ["{{base_url}}"],
							"path": ["api", "users", "restaurants"],
							"query": [
								{
									"key": "cuisineType",
									"value": "Vietnamese"
								}
							]
						},
						"description": "Filter by cuisine type"
					},
					"response": []
				},
				{
					"name": "Search by Restaurant Name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/restaurants/search?q=Ph·ªü",
							"host": ["{{base_url}}"],
							"path": ["api", "users", "restaurants", "search"],
							"query": [
								{
									"key": "q",
									"value": "Ph·ªü"
								}
							]
						},
						"description": "Search restaurants by name"
					},
					"response": []
				},
				{
					"name": "Combined Filters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/restaurants/search?cuisine=Vietnamese&city=H·ªì Ch√≠ Minh&priceRange=$$",
							"host": ["{{base_url}}"],
							"path": ["api", "users", "restaurants", "search"],
							"query": [
								{
									"key": "cuisine",
									"value": "Vietnamese"
								},
								{
									"key": "city",
									"value": "H·ªì Ch√≠ Minh"
								},
								{
									"key": "priceRange",
									"value": "$$"
								}
							]
						},
						"description": "Combine multiple filters"
					},
					"response": []
				}
			],
			"description": "Public APIs that don't require authentication:\n- Get all restaurants\n- Search & filter restaurants\n- View restaurant details"
		}
	]
}